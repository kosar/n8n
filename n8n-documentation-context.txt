Google Sheets API Overview 

bookmark_border
 
The Google Sheets API is a RESTful interface that lets you read and modify a spreadsheet's data. The Sheets API lets you:

Create spreadsheets
Read and write spreadsheet cell values
Update spreadsheet formatting
Manage Connected Sheets
The following is a list of common terms used in the Sheets API:

Spreadsheet
The primary object in Google Sheets. It can contain multiple Sheets, each with structured information contained in Cells. The spreadsheets resource represents a spreadsheet. It contains a unique spreadsheetId value.

Spreadsheet ID
The unique identifier for a spreadsheet. It's a particular string containing letters, numbers, and some special characters that reference a spreadsheet and it can be derived from the spreadsheet's URL. Spreadsheet IDs are stable, even if the spreadsheet name changes.

https://docs.google.com/spreadsheets/d/SPREADSHEET_ID/edit?gid=SHEET_ID#gid=SHEET_ID
Sheet
A page or tab within a spreadsheet. The Sheets resource represents a sheet. It contains a unique numeric sheetId value and sheet title as part of the SheetProperties object.

Sheet ID
The unique identifier for a specific sheet within a spreadsheet. It's a particular integer containing numbers that reference a sheet and it can be derived from the spreadsheet's URL. Sheet IDs are stable, even if the sheet name changes. For an example, see Spreadsheet ID.
Cell
An individual field of text or data within a sheet. Cells are arranged in rows and columns, and can be grouped as a range of cells. The Cells resource represents each cell, but it doesn't have a unique ID value. Instead, row and column coordinates identify the cells.

A1 notation
A syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers. This method is the most common and useful when referencing an absolute range of cells.
Show examples
Sheet1!A1:B2 refers to all the cells in the first two rows and columns of Sheet1.
Sheet1!A:A refers to all the cells in the first column of Sheet1.
Sheet1!1:2 refers to all the cells in the first two rows of Sheet1.
Sheet1!A5:A refers to all the cells of the first column of Sheet 1, from row 5 onward.
A1:B2 refers to all the cells in the first two rows and columns of the first visible sheet.
Sheet1 refers to all the cells in Sheet1.
'Jon's_Data'!A1:D5 refers to all the cells in the first five rows and four columns of a sheet named "Jon's_Data."
'My Custom Sheet'!A:A refers to all the cells in the first column of a sheet named "My Custom Sheet."
'My Custom Sheet' refers to all the cells in "My Custom Sheet".
Single quotes are required for sheet names with spaces or special characters.

Tip: Where possible, use distinct names for objects in your spreadsheets. For example, A1 (without quotes) refers to cell A1 in the first visible sheet. 'A1' refers to a sheet with the name A1. Similarly, Sheet1 refers to a sheet with the name Sheet1. However, if there's a named range titled "Sheet1", then Sheet1 refers to the named range and 'Sheet1' refers to the sheet.

R1C1 notation
A syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using row numbers and column numbers. This method is less common than A1 notation, but can be useful when referencing a range of cells relative to a given cell's position.
Show examples
Sheet1!R1C1:R2C2 refers to the first two cells in the top two rows of Sheet1.
R1C1:R2C2 refers to the first two cells in the top two rows of the first visible sheet.
Sheet1!R[3]C[1] refers to the cell that is three rows below and one column to the right of the current cell.
Named range
A defined cell or range of cells with a custom name to simplify references throughout an application. A FilterView resource represents a named range.
Protected range
A defined cell or range of cells that cannot be modified. A ProtectedRange resource represents a protected range.


Integrations
Built-in nodes
Actions
Google Sheets
Google Sheets#
Use the Google Sheets node to automate work in Google Sheets, and integrate Google Sheets with other applications. n8n has built-in support for a wide range of Google Sheets features, including creating, updating, deleting, appending, removing and getting documents.

On this page, you'll find a list of operations the Google Sheets node supports and links to more resources.

Credentials

Refer to Google Sheets credentials for guidance on setting up authentication.

Operations#
Document
Create a spreadsheet.
Delete a spreadsheet.
Sheet Within Document
Append or Update Row: Append a new row, or update the current one if it already exists.
Append Row: Create a new row.
Clear all data from a sheet.
Create a new sheet.
Delete a sheet.
Delete Rows or Columns: Delete columns and rows from a sheet.
Get Row(s): Read all rows in a sheet.
Update Row: Update a row in a sheet.
Templates and examples#
OpenAI GPT-3: Company Enrichment from website content
by Lucas Perret

View template details
Automated Web Scraping: email a CSV, save to Google Sheets & Microsoft Excel
by Mihai Farcas

View template details
Scrape business emails from Google Maps without the use of any third party APIs
by Akram Kadri

View template details
Browse Google Sheets integration templates, or search all templates
Related resources#
Refer to Google Sheet's API documentation for more information about the service.

Common issues#
For common questions or issues and suggested solutions, refer to Common issues.

What to do if your operation isn't supported#
If this node doesn't support the operation you want to do, you can use the HTTP Request node to call the service's API.

You can use the credential you created for this service in the HTTP Request node:

In the HTTP Request node, select Authentication > Predefined Credential Type.
Select the service you want to connect to.
Select your credential.
Refer to Custom API operations for more information.


Integrations
Built-in nodes
Credentials
Google
Google credentials#
This section contains:

OAuth2 single service: Create an OAuth2 credential for a specific service node, such as the Gmail node.
OAuth2 generic: Create an OAuth2 credential for use with custom operations.
Service Account: Create a Service Account credential for some specific service nodes.
Google PaLM and Gemini: Get a Google Gemini/Google PaLM API key.
OAuth2 and Service Account#
There are two authentication methods available for Google services nodes:

OAuth2: Recommended because it's more widely available and easier to set up.
Service Account: Refer to the Google documentation: Understanding service accounts for guidance on when you need a service account.
Note for n8n Cloud users

For the following nodes, you can authenticate by selecting Sign in with Google in the OAuth section:

Google Calendar
Google Contacts
Google Drive
Google Mail
Google Sheets
Google Sheets Trigger
Google Tasks
Compatible nodes#
Once configured, you can use your credentials to authenticate the following nodes. Most nodes are compatible with OAuth2 authentication. Support for Service Account authentication is limited.

Node	OAuth	Service Account
Google Ads	✅	❌
Gmail	✅	⚠
Google Analytics	✅	❌
Google BigQuery	✅	✅
Google Books	✅	✅
Google Calendar	✅	❌
Google Chat	❌	✅
Google Cloud Storage	✅	❌
Google Contacts	✅	❌
Google Cloud Firestore	✅	✅
Google Cloud Natural Language	✅	❌
Google Cloud Realtime Database	✅	❌
Google Docs	✅	✅
Google Drive	✅	✅
Google Drive Trigger	✅	✅
Google Perspective	✅	❌
Google Sheets	✅	✅
Google Slides	✅	✅
Google Tasks	✅	❌
Google Translate	✅	✅
Google Workspace Admin	✅	❌
YouTube	✅	❌
Gmail and Service Accounts

Google technically supports Service Accounts for use with Gmail, but it requires enabling domain-wide delegation, which Google discourages, and its behavior can be inconsistent.

n8n recommends using OAuth2 with the Gmail node.





Hosting n8n
Installation
npm#
npm is a quick way to get started with n8n on your local machine. You must have Node.js installed. n8n requires Node.js 18 or above.

Latest and Next versions

n8n releases a new minor version most weeks. The latest version is for production use. next is the most recent release. You should treat next as a beta: it may be unstable. To report issues, use the forum.

Current latest: 1.81.4
Current next: 1.82.1

Try n8n with npx#
You can try n8n without installing it using npx.

From the terminal, run:


npx n8n
This command will download everything that's needed to start n8n. You can then access n8n and start building workflows by opening http://localhost:5678.

Install globally with npm#
To install n8n globally, use npm:


npm install n8n -g
To install or update to a specific version of n8n use the @ syntax to specify the version. For example:


npm install -g n8n@0.126.1
To install next:


npm install -g n8n@next
After the installation, start n8n by running:


n8n
# or
n8n start
Keep in mind

Windows users remember to change into the .n8n directory of your Home folder (~/.n8n) before running n8n start.

Next steps#
Try out n8n using the Quickstarts.

Updating#
To update your n8n instance to the latest version, run:


npm update -g n8n
To install the next version:


npm install -g n8n@next
n8n with tunnel#
Danger

Use this for local development and testing. It isn't safe to use it in production.

To use webhooks for trigger nodes of external services like GitHub, n8n has to be reachable from the web. n8n runs a tunnel service that can redirect requests from n8n's servers to your local n8n instance.

Start n8n with --tunnel by running:


n8n start --tunnel
Reverting an upgrade#
Install the older version that you want to go back to.

If the upgrade involved a database migration:

Check the feature documentation and release notes to see if there are any manual changes you need to make.
Run n8n db:revert on your current version to roll back the database. If you want to revert more than one database migration, you need to repeat this process.


Using n8n
Key concepts
Glossary
AI agent#
AI agents are artificial intelligence systems capable of responding to requests, making decisions, and performing real-world tasks for users. They use large language models (LLMs) to interpret user input and make decisions about how to best process requests using the information and resources they have available.

AI chain#
AI chains allow you to interact with large language models (LLMs) and other resources in sequences of calls to components. AI chains in n8n don't use persistent memory, so you can't use them to reference previous context (use AI agents for this).

AI embedding#
Embeddings are numerical representations of data using vectors. They're used by AI to interpret complex data and relationships by mapping values across many dimensions. Vector databases, or vector stores, are databases designed to store and access embeddings.

AI memory#
In an AI context, memory allows AI tools to persist message context across interactions. This allows you to have a continuing conversations with AI agents, for example, without submitting ongoing context with each message. In n8n, AI agent nodes can use memory, but AI chains can't.

AI tool#
In an AI context, a tool is an add-on resource that the AI can refer to for specific information or functionality when responding to a request. The AI model can use a tool to interact with external systems or complete specific, focused tasks.

AI vector store#
Vector stores, or vector databases, are databases designed to store numerical representations of information called embeddings.

API#
APIs, or application programming interfaces, offer programmatic access to a service's data and functionality. APIs make it easier for software to interact with external systems. They're often offered as an alternative to traditional user-focused interfaces accessed through web browsers or UI.

canvas (n8n)#
The canvas is the main interface for building workflows in n8n's editor UI. You use the canvas to add and connect nodes to compose workflows.

cluster node (n8n)#
In n8n, cluster nodes are groups of nodes that work together to provide functionality in a workflow. They consist of a root node and one or more sub nodes that extend the node's functionality.

credential (n8n)#
In n8n, credentials store authentication information to connect with specific apps and services. After creating credentials with your authentication information (username and password, API key, OAuth secrets, etc.), you can use the associated app node to interact with the service.

data pinning (n8n)#
Data pinning allows you to temporarily freeze the output data of a node during workflow development. This allows you to develop workflows with predictable data without making repeated requests to external services. Production workflows ignore pinned data and request new data on each execution.

editor (n8n)#
The n8n editor UI allows you to create and manage workflows. The main area is the canvas, where you can compose workflows by adding, configuring, and connecting nodes. The side and top panels allow you to access other areas of the UI like credentials, templates, variables, executions, and more.

evaluation (n8n)#
In n8n, evaluation allows you to tag and organize execution history and compare it against new executions. You can use this to understand how your workflow performs over time as you make changes. In particular, this is useful while developing AI-centered workflows.

expression (n8n)#
In n8n, expressions allow you to populate node parameters dynamically by executing JavaScript code. Instead of providing a static value, you can use the n8n expression syntax to define the value using data from previous nodes, other workflows, or your n8n environment.

LangChain#
LangChain is an AI-development framework used to work with large language models (LLMs). LangChain provides a standardized system for working with a wide variety of models and other resources and linking different components together to build complex applications.

Large language model (LLM)#
Large language models, or LLMs, are AI machine learning models designed to excel in natural language processing (NLP) tasks. They're built by training on large amounts of data to develop probabilistic models of language and other data.

node (n8n)#
In n8n, nodes are individual components that you compose to create workflows. Nodes define when the workflow should run, allow you to fetch, send, and process data, can define flow control logic, and connect with external services.

project (n8n)#
n8n projects allow you to separate workflows, variables, and credentials into separate groups for easier management. Projects make it easier for teams to collaborate by sharing and compartmentalizing related resources.

root node (n8n)#
Each n8n cluster node contains a single root nodes that defines the main functionality of the cluster. One or more sub nodes attach to the root node to extend its functionality.

sub node (n8n)#
n8n cluster nodes consist of one or more sub nodes connected to a root node. Sub nodes extend the functionality of the root node, providing access to specific services or resources or offering specific types of dedicated processing, like calculator functionality, for example.

template (n8n)#
n8n templates are pre-built workflows designed by n8n and community members that you can import into your n8n instance. When using templates, you may need to fill in credentials and adjust the configuration to suit your needs.

trigger node (n8n)#
A trigger node is a special node responsible for executing the workflow in response to certain conditions. All production workflows need at least one trigger to determine when the workflow should run.

workflow (n8n)#
An n8n workflow is a collection of nodes that automate a process. Workflows begin execution when a trigger condition occurs and execute sequentially to achieve complex tasks.




Integrations
Built-in nodes
Built-in integrations#
This section contains the node library: reference documentation for every built-in node in n8n, and their credentials.

Node operations: Triggers and Actions#
When you add a node to a workflow, n8n displays a list of available operations. An operation is something a node does, such as getting or sending data.

There are two types of operation:

Triggers start a workflow in response to specific events or conditions in your services. When you select a Trigger, n8n adds a trigger node to your workflow, with the Trigger operation you chose pre-selected. When you search for a node in n8n, Trigger operations have a bolt icon Trigger icon.
Actions are operations that represent specific tasks within a workflow, which you can use to manipulate data, perform operations on external systems, and trigger events in other systems as part of your workflows. When you select an Action, n8n adds a node to your workflow, with the Action operation you chose pre-selected.
Core nodes#
Core nodes can be actions or triggers. Whereas most nodes connect to a specific external service, core nodes provide functionality such as logic, scheduling, or generic API calls.

Cluster nodes#
Cluster nodes are node groups that work together to provide functionality in an n8n workflow. Instead of using a single node, you use a root node and one or more sub-nodes that extend the functionality of the node.

Screenshot of a workflow with a root node and two sub-nodes

Credentials#
External services need a way to identify and authenticate users. This data can range from an API key over an email/password combination to a long multi-line private key. You can save these in n8n as credentials.

Nodes in n8n can then request that credential information. As another layer of security, only node types with specific access rights can access the credentials.

To make sure that the data is secure, it gets saved to the database encrypted. n8n uses a random personal encryption key, which it automatically generates on the first run of n8n and then saved under ~/.n8n/config.

To learn more about creating, managing, and sharing credentials, refer to Manage credentials.

Community nodes#
n8n supports custom nodes built by the community. Refer to Community nodes for guidance on installing and using these nodes.

For help building your own custom nodes, and publish them to npm, refer to Creating nodes for more information.


Integrations
Built-in nodes
Core nodes
Webhook
Webhook node#
Use the Webhook node to create webhooks, which can receive data from apps and services when an event occurs. It's a trigger node, which means it can start an n8n workflow. This allows services to connect to n8n and run a workflow.

You can use the Webhook node as a trigger for a workflow when you want to receive data and run a workflow based on the data. The Webhook node also supports returning the data generated at the end of a workflow. This makes it useful for building a workflow to process data and return the results, like an API endpoint.

The webhook allows you to trigger workflows from services that don't have a dedicated app trigger node.

Workflow development process#
n8n provides different Webhook URLs for testing and production. The testing URL includes an option to Listen for test event. Refer to Workflow development for more information on building, testing, and shifting your Webhook node to production.

Node parameters#
Use these parameters to configure your node.

Webhook URLs#
The Webhook node has two Webhook URLs: test and production. n8n displays the URLs at the top of the node panel.

Select Test URL or Production URL to toggle which URL n8n displays.

Sample Webhook URLs in the Webhook node's Parameters tab display a Test URL and Production URL
Sample Webhook URLs in the Webhook node's Parameters tab
Test: n8n registers a test webhook when you select Listen for Test Event or Test workflow, if the workflow isn't active. When you call the webhook URL, n8n displays the data in the workflow.
Production: n8n registers a production webhook when you activate the workflow. When using the production URL, n8n doesn't display the data in the workflow. You can still view workflow data for a production execution: select the Executions tab in the workflow, then select the workflow execution you want to view.
HTTP Method#
The Webhook node supports standard HTTP Request Methods:

DELETE
GET
HEAD
PATCH
POST
PUT

Webhook max payload

The webhook maximum payload size is 16MB. If you're self-hosting n8n, you can change this using the endpoint environment variable N8N_PAYLOAD_SIZE_MAX.

Path#
By default, this field contains a randomly generated webhook URL path, to avoid conflicts with other webhook nodes.

You can manually specify a URL path, including adding route parameters. For example, you may need to do this if you use n8n to prototype an API and want consistent endpoint URLs.

The Path field can take the following formats:

/:variable
/path/:variable
/:variable/path
/:variable1/path/:variable2
/:variable1/:variable2
Supported authentication methods#
You can require authentication for any service calling your webhook URL. Choose from these authentication methods:

Basic auth
Header auth
JWT auth
None
Refer to Webhook credentials for more information on setting up each credential type.

Respond#
Immediately: The Webhook node returns the response code and the message Workflow got started.
When Last Node Finishes: The Webhook node returns the response code and the data output from the last node executed in the workflow.
Using 'Respond to Webhook' Node: The Webhook node responds as defined in the Respond to Webhook node.
Response Code#
Customize the HTTP response code that the Webhook node returns upon successful execution. Select from common response codes or create a custom code.

Response Data#
Choose what data to include in the response body:

All Entries: The Webhook returns all the entries of the last node in an array.
First Entry JSON: The Webhook returns the JSON data of the first entry of the last node in a JSON object.
First Entry Binary: The Webhook returns the binary data of the first entry of the last node in a binary file.
No Response Body: The Webhook returns without a body.
Applies only to Respond > When Last Node Finishes.

Node options#
Select Add Option to view more configuration options. The available options depend on your node parameters. Refer to the table for option availability.

Allowed Origins (CORS): Set the permitted cross-origin domains. Enter a comma-separated list of URLs allowed for cross-origin non-preflight requests. Use * (default) to allow all origins.
Binary Property: Enabling this setting allows the Webhook node to receive binary data, such as an image or audio file. Enter the name of the binary property to write the data of the received file to.
Ignore Bots: Ignore requests from bots like link previewers and web crawlers.
IP(s) Whitelist: Enable this to limit who (or what) can invoke a Webhook trigger URL. Enter a comma-separated list of allowed IP addresses. Access from IPs outside the whitelist throws a 403 error. If left blank, all IP addresses can invoke the webhook trigger URL.
No Response Body: Enable this to prevent n8n sending a body with the response.
Raw Body: Specify that the Webhook node will receive data in a raw format, such as JSON or XML.
Response Content-Type: Choose the format for the webhook body.
Response Data: Send custom data with the response.
Response Headers: Send extra headers in the Webhook response. Refer to MDN Web Docs | Response header to learn more about response headers.
Property Name: by default, n8n returns all available data. You can choose to return a specific JSON key, so that n8n returns the value.
Option	Required node configuration
Allowed Origins (CORS)	Any
Binary Property	Either:
HTTP Method > POST
HTTP Method > PATCH
HTTP Method > PUT
Ignore Bots	Any
IP(s) Whitelist	Any
Property Name	Both:
Respond > When Last Node Finishes
Response Data > First Entry JSON
No Response Body	Respond > Immediately
Raw Body	Any
Response Code	Any except Respond > Using 'Respond to Webhook' Node
Response Content-Type	Both:
Respond > When Last Node Finishes
Response Data > First Entry JSON
Response Data	Respond > Immediately
Response Headers	Any
